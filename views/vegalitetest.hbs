<h2> This page is a test for how vega lite works in web pages. </h2>

<!-- Dependencies for vega lite. -->
<script src="https://cdn.jsdelivr.net/npm/vega@5.22.1"></script>
<script src="https://cdn.jsdelivr.net/npm/vega-lite@5.5.0"></script>
<script src="https://cdn.jsdelivr.net/npm/vega-embed@6.21.0"></script>

<!-- Container for the visualization -->
<div id="vis"></div>
<!-- Script for the visualization specification. --> 
<script>
  // Assign the specification to a local variable vlSpec.
  var vlSpec = {
    $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
    data: {
      values: [
        { a: 'C', b: 2 },
        { a: 'C', b: 7 },
        { a: 'C', b: 4 },
        { a: 'D', b: 1 },
        { a: 'D', b: 2 },
        { a: 'D', b: 6 },
        { a: 'E', b: 8 },
        { a: 'E', b: 4 },
        { a: 'E', b: 7 }
      ]
    },
    mark: 'bar',
    encoding: {
      y: { field: 'a', type: 'nominal' },
      x: {
        aggregate: 'average',
        field: 'b',
        type: 'quantitative',
        axis: {
          title: 'Average of b'
        }
      }
    }
  };

  // Embed the visualization in the container with id `vis`
  vegaEmbed('#vis', vlSpec);



</script>
<div id="vis2"></div>
<script type="module"> 
  import axios from 'https://cdn.skypack.dev/axios';
  function csvToArray(str, delimiter = ",") {
  const headers = str.slice(0, str.indexOf("\n")).split(delimiter);
  const rows = str.slice(str.indexOf("\n") + 1).split("\n");
  const arr = rows.map(function (row) {
    const values = row.split(delimiter);
    const el = headers.reduce(function (object, header, index) {
      object[header] = values[index];
      return object;
    }, {});
    return el;
  });
  return arr;
}


  function fillYear(year,start,end){
    let intStart = parseInt(start)
    let yearList = [];
    for (let i = intStart; i <= end; i++) {
      if(i>9){ yearList.push(year + "M" + i)} else yearList.push(year + "M" + "0" + i)
  } 
    return yearList
  }

  function fromToListCreator(from, to){
      let list = [];
      from = from.split('M');
      to = to.split('M');
      console.log("from")
      console.log(from)
      console.log("to")
      console.log(to)
      if(from[0]==to[0]){
        if(from[1]<to[1]){
        return fillYear(from[0],from[1],to[1])}
      } else if (from[0]<to[0]) {
          list = list.concat(fillYear(from[0],from[1],"12"))
          for (let i = parseInt(from[0])+1; i < to[0]; i++) {
              list = list.concat(fillYear(i,"01","12"))
          }
          list = list.concat(fillYear(to[0],"01",to[1]))
      } 
      console.log("list")
      console.log(list)
      return list
  }

  function fetchData(slectedTabel){
    return axios.post("https://api.statbank.dk/v1/data", {
   "table": slectedTabel,
   "format": "CSV",
   "variables": [
      {
         "code": "ENHED",
         "values": [
            "100"
         ]
      },
      {
         "code": "TID",
         "values": [
            "2001*",
            "2002*"
         ]
      },
      {
         "code": "VareGR",
         "values": [
            "000000"
         ]
      }
   ]
    })
  .then(function (response) {
    return response
    
  })
   
  }


  const FetchDataPromisePris111 = new Promise((value) => {value(fetchData("PRIS111"))
  })

  FetchDataPromisePris111.then((value) => {console.log("value")
    const data = csvToArray(value.data)
    console.log(data)
    
    
    
    }
  )
  console.log(fromToListCreator("2001M01","2010M06"))


  function twoArrayToVegaObjects(labels,data){
    const zip = (a, b) => Array.from(Array(Math.max(b.length, a.length)), (_, i) => [a[i],b[i]])
    const Unlabeleddata = zip(labels,data)
    var labeledData = []
    Unlabeleddata.forEach((aData) => {
        labeledData.push({a : aData[0], b : aData[1]})
    })
    return labeledData
  }

  



  const myPromise = new Promise((value) => {value(axios.get('/api/data'))
  })
  myPromise.then((value) => {
    const labels = ["a", "b", "c", "d", "e","f"]
    const data = twoArrayToVegaObjects(labels,value.data)
    
    vlSpec = {
    $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
    data: {
      values: data
    },
    mark: 'bar',
    encoding: {
      y: { field: 'a', type: 'nominal' },
      x: {
        aggregate: 'average',
        field: 'b',
        type: 'quantitative',
        axis: {
          title: 'Average of b'
        }
      }
    }
  }
  vegaEmbed('#vis2', vlSpec)
  .then((res) => res.view
  .insert("labeledData", data)
  .run())
  }
    )
</script>

<div class="slider">
<input type="range" min="0" max="200" value="100" oninput="rangeValue.innerText = this.value">
<p id="rangeValue"></p>
</div>