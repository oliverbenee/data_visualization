<!-- Dependencies for vega lite. -->
<script src="https://cdn.jsdelivr.net/npm/vega@5.22.1"></script>
<script src="https://cdn.jsdelivr.net/npm/vega-lite@5.5.0"></script>
<script src="https://cdn.jsdelivr.net/npm/vega-embed@6.21.0"></script>

<div id="sunburst" style="display: inline-block;"></div>
<div id="waterfall" style="display: inline-block;"></div>

<script type="module">
  import axios from 'https://cdn.skypack.dev/axios';
  var sunburstSpec = {
    "$schema": "https://vega.github.io/schema/vega/v5.json",
    "description": "An example of a space-fulling radial layout for hierarchical data.",
    "width": 600,
    "height": 600,
    "padding": 5,
    "autosize": "none",
    // Interactions. 
    "signals": [
      { "name": "title", "value": "Price index distribution for various wares.", "description": "{'group':'Title'}" },
      {
        "name": "titleFont",
        "value": 25,
        "description": "{'group':'Title', 'displayName':'Font Size'}"
      },
      {
        "name": "fontScale",
        "update": "max(min(10,min(width,height)/35),5)",
        "description": "{'group':'Title', 'displayName':'Font Size'}"
      },
      { "name": "sizeRef", "update": "min(width,height)/2.5" },
      { "name": "centerX", "update": "width/2" },
      { "name": "centerY", "update": "height/2" },
      // Bools for hovering. 
      {
        "name": "hoveredArcIn",
        "on": [
          { "events": "arc:mouseover", "update": "datum" },
          { "events": "arc:mouseout", "update": "{}" }
        ]
      },
      {
        "name": "hoveredArcOUT",
        "on": [
          { "events": "arc:mouseover", "update": "datum" },
          { "events": "arc:mouseout", "update": "{}" }
        ]
      },
      {
        "name": "hoveredText",
        "value": {},
        "on": [
          { "events": "text:mouseover", "update": "datum" },
          { "events": "text:mouseout", "update": "{}" }
        ]
      },
      {
        "name": "isHoveredOnArc",
        "init": "false",
        "on": [
          { "events": "arc:mouseover", "update": "true" },
          { "events": "arc:mouseout", "update": "false" }
        ]
      },
      {
        "name": "isHoveredOnText",
        "init": "false",
        "on": [
          { "events": "text:mouseover", "update": "true" },
          { "events": "text:mouseout", "update": "false" }
        ]
      },
      // Are we hovering over something, and is it text?
      {
        "name": "isHoveredEmpty",
        "value": {
          "category": "A",
          "myTreeAncestorList": { "currentNodeAndAncestor": "hooba" }
        },
        "on": [
          { "events": "arc:mouseout ", "update": "true" },
          { "events": "arc:mouseover", "update": "false" },
          { "events": "text:mouseout ", "update": "true" },
          { "events": "text:mouseover", "update": "false" }
        ]
      }
    ],
    "data": [
      {
        // The data itself. 
        "name": "mainData",
        "values": [
          // Levels.
          {
            "value": "{'isOptional':false, 'dataType':'Real', 'doesRequireAggregate':true,isShowInTooltip:true}",
            "level1": "{'displayName':'Level 1', 'isOptional':true, 'dataType':'Any', 'doesRequireAggregate':false,isShowInTooltip:true}",
            "level2": "{'displayName':'Level 2', 'isOptional':true, 'dataType':'Any', 'doesRequireAggregate':false,isShowInTooltip:true}",
            "level3": "{'displayName':'Level 3', 'isOptional':true, 'dataType':'Any', 'doesRequireAggregate':false,isShowInTooltip:true}",
            "level4": "{'displayName':'Level 4', 'isOptional':true, 'dataType':'Any', 'doesRequireAggregate':false,isShowInTooltip:true}",
            "level5": "{'displayName':'Level 5', 'isOptional':true, 'dataType':'Any', 'doesRequireAggregate':false,isShowInTooltip:true}",
            "level6": "{'displayName':'Level 6', 'isOptional':true, 'dataType':'Any', 'doesRequireAggregate':false,isShowInTooltip:true}"
          },
          // BEGIN DATA. 
          { "value": 102.9, "level1": "fødevarer (ej alkohol)", "level2": "fødevarer", "level3": "brød" },
          { "value": 102.6, "level1": "fødevarer (ej alkohol)", "level2": "fødevarer", "level3": "kød" },
          { "value": 109.6, "level1": "fødevarer (ej alkohol)", "level2": "fødevarer", "level3": "fisk og skaldyr" },
          { "value": 104.2, "level1": "fødevarer (ej alkohol)", "level2": "fødevarer", "level3": "mælk ost og æg" },
          { "value": 118.8, "level1": "fødevarer (ej alkohol)", "level2": "fødevarer", "level3": "smør, margarine, olier" },
          { "value": 106.9, "level1": "fødevarer (ej alkohol)", "level2": "fødevarer", "level3": "frugt" },
          { "value": 105.9, "level1": "fødevarer (ej alkohol)", "level2": "fødevarer", "level3": "grøntsager" },
          { "value": 101, "level1": "fødevarer (ej alkohol)", "level2": "fødevarer", "level3": "sukkervarer" },
          { "value": 103.4, "level1": "fødevarer (ej alkohol)", "level2": "fødevarer", "level3": "andre fødevarer" },
          { "value": 105.9, "level1": "fødevarer (ej alkohol)", "level2": "drikke", "level3": "kaffe, te, kakao" },
          { "value": 98.1, "level1": "fødevarer (ej alkohol)", "level2": "drikke", "level3": "mineralvand, sodavand, juice" },
          { "value": 103.2, "level1": "tobak og alkoholgenstande", "level2": "spiritus" },
          { "value": 102.1, "level1": "tobak og alkoholgenstande", "level2": "vin" },
          { "value": 105.1, "level1": "tobak og alkoholgenstande", "level2": "øl" },
          { "value": 100.9, "level1": "tobak og alkoholgenstande", "level2": "tobak" },
          { "value": 97.6, "level1": "beklædning og fodtøj", "level2": "materialer" },
          { "value": 90.4, "level1": "beklædning og fodtøj", "level2": "beklædningsartikler" },
          { "value": 105.2, "level1": "beklædning og fodtøj", "level2": "rensning, reparation" },
          { "value": 105, "level1": "beklædning og fodtøj", "level2": "sko" },
          { "value": 104.1, "level1": "boligbenyttelse, el og opvarmning", "level2": "husleje" },
          { "value": 98.6, "level1": "boligbenyttelse, el og opvarmning", "level2": "vandforsyning" },
          { "value": 90.3, "level1": "boligbenyttelse, el og opvarmning", "level2": "elektricitet" },
          { "value": 85.3, "level1": "boligbenyttelse, el og opvarmning", "level2": "gas" },
          { "value": 94.6, "level1": "boligbenyttelse, el og opvarmning", "level2": "fjernvarme" },
          { "value": 181.9, "level1": "kommunikation", "level2": "posttjenester" },
          { "value": 88.4, "level1": "kommunikation", "level2": "telefon og telefax" },
          { "value": 83.3, "level1": "kultur", "level2": "radio-tv" },
          { "value": 98, "level1": "kultur", "level2": "fotografi" },
          { "value": 82.5, "level1": "kultur", "level2": "databehandling" },
          { "value": 105, "level1": "kultur", "level2": "bøger" },
          { "value": 106.7, "level1": "uddannelse" },
          { "value": 112.4, "level1": "restauranter" }
        ],
        "transform": [
          {
            "type": "aggregate",
            "groupby": [
              "level1",
              "level2",
              "level3",
              "level4",
              "level5",
              "level6"
            ],
            "fields": ["value"],
            "ops": ["sum"],
            "as": ["value"]
          },
          {
            "type": "formula",
            "as": "firstLevelNodesId",
            "expr": "!isDefined(datum.parent)?'rootID':datum.parent"
          },
          // Define level 1, 2, 3, 4, 5, 6 in the vis for easier coding. 
          {
            "type": "formula",
            "expr": "datum.level1?datum.level1:''",
            "as": "level1"
          },
          {
            "type": "formula",
            "expr": "datum.level2?datum.level2:''",
            "as": "level2"
          },
          {
            "type": "formula",
            "expr": "datum.level3?datum.level3:''",
            "as": "level3"
          },
          {
            "type": "formula",
            "expr": "datum.level4?datum.level4:''",
            "as": "level4"
          },
          {
            "type": "formula",
            "expr": "datum.level5?datum.level5:''",
            "as": "level5"
          },
          {
            "type": "formula",
            "expr": "datum.level6?datum.level6:''",
            "as": "level6"
          }
        ]
      },
      // Select arc and parents. 
      {
        "name": "hoveredArcDetail",
        "on": [
          { "trigger": "hoveredArcIn", "toggle": "hoveredArcIn" },
          { "trigger": "hoveredText", "toggle": "hoveredText" }
        ],
        "transform": [
          { "type": "flatten", "fields": ["myTreeAncestorList"] },
          {
            "type": "formula",
            "expr": "datum.myTreeAncestorList.currentNodeAndAncestors",
            "as": "nodeToCheckIfParentOfCurrentNode"
          }
        ]
      },
      {
        "name": "hoveredTextDetail",
        "values": [
          {
            "hoveredText": "blaba",
            "currentNode": "formatted: {Austalie}",
            "r0": 180,
            "a0": 0,
            "r1": 240,
            "a1": 0.1662681348696548,
            "aggregatedValue": 57,
            "firstLevelNodesId": 2,
            "depth": 3,
            "myTreeAncestorList": [
              {
                "parent": "formatted: {9}",
                "currentNode": "formatted: {Austalie}",
                "firstLevelNodesId": 2,
                "level1": "formatted: {1996}",
                "value": 57,
                "currentNodeParent": "formatted: {Austalie}formatted: {9}",
                "parentAndGrandParent": "formatted: {9}formatted: {1996}",
                "ancestors": "formatted: {9}formatted: {1996}rootID612",
                "pseudoKey": 36,
                "currentNodeAndAncestors": "formatted: {Austalie}formatted: {9}formatted: {1996}rootID61236",
                "linkToLevel4": "formatted: {Austalie}formatted: {9}formatted: {1996}",
                "a0": 0,
                "r0": 180,
                "a1": 0.1662681348696548,
                "r1": 240,
                "depth": 3,
                "children": 0,
                "rowKey": "formatted: {Austalie}formatted: {9}",
                "aggregatedValue": 57
              }
            ],
            "nodeToCheckIfParentOfCurrentNode": "formatted: {Austalie}formatted: {9}formatted: {1996}rootID61236"
          }
        ],
        "on": [{ "trigger": "hoveredText", "toggle": "hoveredText" }]
      },
      // Isolated level 1
      {
        "name": "isolatedLevel1",
        "source": ["mainData"],
        "transform": [
          {
            "type": "project",
            "fields": ["level1", "currentNode", "value"],
            "as": ["currentNode", "parent", "value"]
          },
          {
            "type": "aggregate",
            "groupby": ["parent", "currentNode"],
            "fields": ["value"],
            "ops": ["sum"],
            "as": ["value"]
          },
          {
            "type": "formula",
            "as": "parent",
            "expr": "!isDefined(datum.parent)?'rootID':datum.parent"
          },
          { "type": "filter", "expr": "datum.currentNode" },
          { "type": "identifier", "as": "firstLevelNodesId" },
          { "type": "identifier", "as": "pseudoKey" },
          { "type": "formula", "expr": "'rootID'", "as": "ancestors" },
          {
            "type": "formula",
            "expr": "datum.currentNode +datum.parent+datum.pseudoKey",
            "as": "currentNodeAndAncestors"
          }
        ]
      },
      {
        "name": "mainDataWithFirstParentInfo",
        "source": ["mainData"],
        "transform": [
          {
            "type": "lookup",
            "from": "isolatedLevel1",
            "key": "currentNode",
            "fields": ["level1"],
            "values": ["firstLevelNodesId"],
            "as": ["firstLevelNodesId"]
          }
        ]
      },
      // Root node. 
      {
        "name": "rootNode",
        "source": "isolatedLevel1",
        "transform": [
          {
            "type": "project",
            "fields": ["parent", "level2"],
            "as": ["currentNode", "parent"]
          },
          { "type": "aggregate", "groupby": ["currentNode", "parent"] },
          {
            "type": "project",
            "fields": ["currentNode", "parent"],
            "as": ["currentNode", "parent"]
          },
          { "type": "formula", "as": "currentNodeAndAncestors", "expr": "'rootID'" }
        ]
      },
      // Isolated sub-levels 2-6
      {
        "name": "isolatedLevel2",
        "source": "mainDataWithFirstParentInfo",
        "transform": [
          {
            "type": "project",
            "fields": ["level1", "level2", "value", "firstLevelNodesId"],
            "as": ["parent", "currentNode", "value", "firstLevelNodesId"]
          },
          {
            "type": "aggregate",
            "groupby": ["parent", "currentNode", "firstLevelNodesId"],
            "fields": ["value"],
            "ops": ["sum"],
            "as": ["value"]
          },
          { "type": "filter", "expr": "datum.currentNode" },
          { "type": "filter", "expr": "datum.parent" },
          {
            "type": "lookup",
            "from": "isolatedLevel1",
            "key": "currentNode",
            "fields": ["parent"],
            "values": ["currentNodeAndAncestors"],
            "as": ["ancestors"]
          },
          { "type": "identifier", "as": "pseudoKey" },
          {
            "type": "formula",
            "expr": "datum.currentNode +datum.ancestors+datum.pseudoKey",
            "as": "currentNodeAndAncestors"
          },
          {
            "type": "formula",
            "expr": "toString(datum.currentNode) +toString(datum.parent)",
            "as": "currentNodeParent"
          }
        ]
      },
      {
        "name": "isolatedLevel3",
        "source": "mainDataWithFirstParentInfo",
        "transform": [
          {
            "type": "project",
            "fields": [
              "level2",
              "level3",
              "value",
              "firstLevelNodesId",
              "level1"
            ],
            "as": [
              "parent",
              "currentNode",
              "value",
              "firstLevelNodesId",
              "level1"
            ]
          },
          {
            "type": "aggregate",
            "groupby": ["parent", "currentNode", "firstLevelNodesId", "level1"],
            "fields": ["value"],
            "ops": ["sum"],
            "as": ["value"]
          },
          { "type": "filter", "expr": "datum.currentNode" },
          { "type": "filter", "expr": "datum.parent" },
          {
            "type": "formula",
            "expr": "datum.currentNode +datum.parent",
            "as": "currentNodeParent"
          },
          {
            "type": "formula",
            "expr": "toString(datum.parent) +toString(datum.level1)",
            "as": "parentAndGrandParent"
          },
          {
            "type": "lookup",
            "from": "isolatedLevel2",
            "key": "currentNodeParent",
            "fields": ["parentAndGrandParent"],
            "values": ["currentNodeAndAncestors"],
            "as": ["ancestors"]
          },
          { "type": "identifier", "as": "pseudoKey" },
          {
            "type": "formula",
            "expr": "datum.currentNode+datum.ancestors+datum.pseudoKey",
            "as": "currentNodeAndAncestors"
          },
          {
            "type": "formula",
            "expr": "datum.currentNode+datum.parentAndGrandParent",
            "as": "linkToLevel4"
          }
        ]
      },
      {
        "name": "isolatedLevel4",
        "source": "mainDataWithFirstParentInfo",
        "transform": [
          {
            "type": "project",
            "fields": [
              "level3",
              "level4",
              "value",
              "firstLevelNodesId",
              "level2",
              "level1"
            ],
            "as": [
              "parent",
              "currentNode",
              "value",
              "firstLevelNodesId",
              "level2",
              "level1"
            ]
          },
          {
            "type": "aggregate",
            "groupby": [
              "parent",
              "currentNode",
              "firstLevelNodesId",
              "level1",
              "level2"
            ],
            "fields": ["value"],
            "ops": ["sum"],
            "as": ["value"]
          },
          { "type": "filter", "expr": "datum.currentNode" },
          { "type": "filter", "expr": "datum.parent" },
          {
            "type": "formula",
            "expr": "datum.currentNode +datum.parent",
            "as": "currentNodeParent"
          },
          {
            "type": "formula",
            "expr": "toString(datum.parent)+toString(datum.level2)+toString(datum.level1)",
            "as": "parentAndGrandGrandParent"
          },
          {
            "type": "lookup",
            "from": "isolatedLevel3",
            "key": "linkToLevel4",
            "fields": ["parentAndGrandGrandParent"],
            "values": ["currentNodeAndAncestors"],
            "as": ["ancestors"]
          },
          { "type": "identifier", "as": "pseudoKey" },
          {
            "type": "formula",
            "expr": "datum.currentNode+datum.ancestors+datum.pseudoKey",
            "as": "currentNodeAndAncestors"
          },
          {
            "type": "formula",
            "expr": "datum.currentNode+datum.parentAndGrandGrandParent",
            "as": "linkToLevel5"
          }
        ]
      },
      {
        "name": "isolatedLevel5",
        "source": "mainDataWithFirstParentInfo",
        "transform": [
          {
            "type": "project",
            "fields": [
              "level4",
              "level5",
              "value",
              "firstLevelNodesId",
              "level3",
              "level2",
              "level1"
            ],
            "as": [
              "parent",
              "currentNode",
              "value",
              "firstLevelNodesId",
              "level3",
              "level2",
              "level1"
            ]
          },
          {
            "type": "aggregate",
            "groupby": [
              "parent",
              "currentNode",
              "firstLevelNodesId",
              "level1",
              "level2",
              "level3"
            ],
            "fields": ["value"],
            "ops": ["sum"],
            "as": ["value"]
          },
          { "type": "filter", "expr": "datum.currentNode" },
          { "type": "filter", "expr": "datum.parent" },
          {
            "type": "formula",
            "expr": "toString(datum.parent)+toString(datum.level3)+toString(datum.level2)+toString(datum.level1)",
            "as": "parentAndGrandGrandGrandParent"
          },
          {
            "type": "lookup",
            "from": "isolatedLevel4",
            "key": "linkToLevel5",
            "fields": ["parentAndGrandGrandGrandParent"],
            "values": ["currentNodeAndAncestors"],
            "as": ["ancestors"]
          },
          { "type": "identifier", "as": "pseudoKey" },
          {
            "type": "formula",
            "expr": "datum.currentNode+datum.ancestors+datum.pseudoKey",
            "as": "currentNodeAndAncestors"
          },
          {
            "type": "formula",
            "expr": "datum.currentNode+datum.parentAndGrandGrandGrandParent",
            "as": "linkToLevel6"
          }
        ]
      },
      {
        "name": "isolatedLevel6",
        "source": "mainDataWithFirstParentInfo",
        "transform": [
          {
            "type": "project",
            "fields": [
              "level5",
              "level6",
              "value",
              "firstLevelNodesId",
              "level4",
              "level3",
              "level2",
              "level1"
            ],
            "as": [
              "parent",
              "currentNode",
              "value",
              "firstLevelNodesId",
              "level4",
              "level3",
              "level2",
              "level1"
            ]
          },
          {
            "type": "aggregate",
            "groupby": [
              "parent",
              "currentNode",
              "firstLevelNodesId",
              "level4",
              "level3",
              "level2",
              "level1"
            ],
            "fields": ["value"],
            "ops": ["sum"],
            "as": ["value"]
          },
          { "type": "filter", "expr": "datum.currentNode" },
          { "type": "filter", "expr": "datum.parent" },
          {
            "type": "formula",
            "expr": "toString(datum.parent)+toString(datum.level4)+toString(datum.level3)+toString(datum.level2)+toString(datum.level1)",
            "as": "parentAndGrandGrandGrandGrandParent"
          },
          {
            "type": "lookup",
            "from": "isolatedLevel5",
            "key": "linkToLevel6",
            "fields": ["parentAndGrandGrandGrandGrandParent"],
            "values": ["currentNodeAndAncestors"],
            "as": ["ancestors"]
          },
          { "type": "identifier", "as": "pseudoKey" },
          {
            "type": "formula",
            "expr": "datum.currentNode+datum.ancestors+datum.pseudoKey",
            "as": "currentNodeAndAncestors"
          },
          {
            "type": "formula",
            "expr": "datum.currentNode+datum.parentAndGrandGrandGrandGrandParent",
            "as": "linkToLevel7"
          }
        ]
      },
      // Merging of levels. 
      {
        "name": "mergedlevels",
        "source": [
          "isolatedLevel1",
          "isolatedLevel2",
          "isolatedLevel3",
          "isolatedLevel4",
          "isolatedLevel5",
          "isolatedLevel6",
          "rootNode"
        ],
        "transform": [
          {
            "type": "formula",
            "expr": "toString(datum.currentNode) +toString(datum.parent)",
            "as": "rowKey"
          }
        ]
      },
      {
        "name": "parents",
        "source": ["mergedlevels"],
        "transform": [{ "type": "project", "fields": ["ancestors"] }]
      },
      {
        "name": "mergedlevelsFinal",
        "source": [
          "isolatedLevel1",
          "isolatedLevel2",
          "isolatedLevel3",
          "isolatedLevel4",
          "isolatedLevel5",
          "isolatedLevel6",
          "rootNode"
        ],
        "transform": [
          {
            "type": "formula",
            "as": "value",
            "expr": "!indata('parents','ancestors',datum.currentNodeAndAncestors)? datum.value:''"
          },
          {
            "type": "formula",
            "expr": "toString(datum.currentNodeAndAncestors)",
            "as": "currentNodeAndAncestors"
          },
          {
            "type": "formula",
            "expr": "toString(datum.ancestors)",
            "as": "ancestors"
          },
          {
            "type": "filter",
            "expr": "!test(/isShowInTooltip/, datum.currentNode)"
          }
        ]
      },
      // Define tree structure. 
      {
        "name": "tree_original",
        "source": ["mergedlevelsFinal"],
        "transform": [
          {
            "type": "stratify",
            "key": "currentNodeAndAncestors",
            "parentKey": "ancestors"
          },
          {
            "type": "partition",
            "field": "value",
            "sort": { "field": "value" },
            "size": [{ "signal": "2 * PI" }, { "signal": "sizeRef" }],
            "as": ["a0", "r0", "a1", "r1", "depth", "children"]
          },
          {
            "type": "formula",
            "expr": "!datum.children?datum.value:''",
            "as": "value"
          },
          {
            "type": "filter",
            "expr": "!test(/isShowInTooltip/, datum.currentNodeAndAncestors)"
          },
          {
            "type": "formula",
            "expr": "toString(datum.currentNode) +toString(datum.parent)",
            "as": "rowKey"
          },
          {
            "type": "lookup",
            "from": "mergedlevels",
            "key": "rowKey",
            "fields": ["rowKey"],
            "values": ["value"],
            "as": ["aggregatedValue"]
          }
        ]
      },
      {
        "name": "tree_withoutRoot",
        "source": ["tree_original"],
        "transform": [
          { "type": "filter", "expr": "datum.depth>0" },
          {
            "type": "formula",
            "expr": "toString(datum.currentNode) +toString(datum.parent)",
            "as": "rowKey"
          },
          {
            "type": "lookup",
            "from": "mergedlevels",
            "key": "rowKey",
            "fields": ["rowKey"],
            "values": ["value"],
            "as": ["aggregatedValue"]
          },
          {
            "type": "formula",
            "expr": "treeAncestors('tree_original',datum.currentNodeAndAncestors)",
            "as": "myTreeAncestorList"
          },
          {
            "type": "formula",
            "expr": "treeAncestors('tree_original', datum.currentNode)",
            "as": "currentLevel"
          }
        ]
      },
      {
        "name": "nodeLabels",
        "source": "tree_withoutRoot",
        "transform": [
          { "type": "filter", "expr": "datum.currentNode!=='rootID'" },
          { "type": "filter", "expr": "datum.a1-datum.a0>0.1" },
          {
            "type": "project",
            "fields": [
              "currentNode",
              "r0",
              "a0",
              "r1",
              "a1",
              "aggregatedValue",
              "firstLevelNodesId",
              "depth",
              "myTreeAncestorList"
            ],
            "as": [
              "currentNode",
              "r0",
              "a0",
              "r1",
              "a1",
              "aggregatedValue",
              "firstLevelNodesId",
              "depth",
              "myTreeAncestorList"
            ]
          }
        ]
      }
    ],
    // COLOR SCALE. 
    "scales": [
      {
        "name": "color",
        "type": "ordinal",
        "domain": { "data": "tree_original", "field": "firstLevelNodesId" },
        "range": { "scheme": "viridis" }
      }
    ],
    // Settings for marks.
    "marks": [
      {
        "name": "arcMarks",
        "type": "arc",
        "from": { "data": "tree_withoutRoot" },
        "encode": {
          // Circular marks. 
          "enter": {
            "xc": { "signal": "centerX" },
            "yc": { "signal": "centerY / 2" },
            "fill": { "scale": "color", "field": "firstLevelNodesId" }
          },
          // Mark settings. 
          "update": {
            "xc": { "signal": "centerX" },
            "yc": { "signal": "centerY" },
            "startAngle": { "signal": "datum.a0+0 " },
            "endAngle": { "signal": "datum.a1 " },
            "innerRadius": { "signal": "datum.r0  " },
            "outerRadius": { "signal": "datum.r1 " },
            // Color of stroke borders of elements not highlihgted. 
            "stroke": { "value": "#FFFFFF00" },
            "strokeWidth": { "value": 0.5 },
            "zindex": { "value": 0 },
            // Default opacity and hovered opacity. 
            "fillOpacity": [
              // Default opacity.
              {
                "test": "indata('hoveredTextDetail','nodeToCheckIfParentOfCurrentNode',datum.currentNodeAndAncestors)||indata('hoveredArcDetail','nodeToCheckIfParentOfCurrentNode',datum.currentNodeAndAncestors)",
                "value": 1
              },
              // Opacity of other elements when not hovered over them.  
              {
                "test": "((isHoveredOnArc==true)||(isHoveredOnText==true))&&!indata('hoveredArcDetail','nodeToCheckIfParentOfCurrentNode',datum.currentNodeAndAncestors)",
                "value": 0.75
              }
            ]
          },
          // Hovering highlight. For outmost level add tooltip.
          "hover": {
            "stroke": { "value": "#fde725" }, // color based on https://waldyrious.net/viridis-palette-generator/
            "strokeWidth": { "value": 2 },
            "zindex": { "value": 1 },
            "tooltip": {
              //"signal": "datum.parent + ' -> ' + datum.currentNode + ': ' + datum.value"
              "signal": "'Price index for ' + datum.currentNode + ': ' + datum.value"
            }
          }
        }
      },
      // HEADER.
      {
        "type": "text",
        "name": "alp-theme-header-fill",
        "encode": {
          "enter": { "align": { "value": "center" }, "baseline": { "value": "top" } },
          "update": {
            "x": { "signal": "centerX" },
            "y": { "signal": "5" },
            "text": { "signal": "title" },
            "fontSize": { "signal": "titleFont" }
          }
        }
      },
      // TEXT LABELS ON THE VIS
      {
        "type": "text",
        "from": { "data": "nodeLabels" },
        "encode": {
          "enter": {
            "text": { "field": "currentNode" },
            "fontSize": { "signal": "fontScale" },
            "baseline": { "value": "middle" },
            "align": { "value": "center" },
            "limit": { "signal": "(datum.r1-datum.r0)*0.9" },
            "fill": { "value": "white" }
          },
          "update": {
            "x": { "signal": "centerX" },
            "y": { "signal": "centerY" },
            "limit": { "signal": "(datum.r1-datum.r0)*0.9" },
            "radius": { // How far away from the center. 
              "signal": "(datum['r0'] == 0 ? 0 : datum['r0'] + datum['r1']) / 2"
            },
            "theta": { "signal": "(datum['a0'] + datum['a1']) / 2" },
            "angle": { // Where on the rotation. (Calculate middle). 
              "signal": "datum['r0'] == 0 ? 0 : ((datum['a0'] + datum['a1']) / 2) * 180 / PI + (inrange(((datum['a0'] + datum['a1']) / 2) % (2 * PI), [0, PI]) ? 270 : 90)"
            },
            "fontWeight": { "value": "normal" }
          }
        }, "interactive": false // Makes text hoverable. 
      }
    ]
  };
  vegaEmbed('#sunburst', sunburstSpec, {
    patch: (sunburstSpec) => {
      sunburstSpec.signals.push({
        "name": "leafClick",
        "on": [{ "events": "arc:mousedown", "update": "warn(datum)" }] // alternative is "update": "barClick + 1"
      })
      return sunburstSpec;
    }
  }).then(result => {
    result.view.addSignalListener('leafClick', function (event, value) {
      document.getElementById('waterfall').innerHTML=""
      //console.log("click event: " + JSON.stringify(value, null, 4))
      console.log("Clicked: " + value.currentNode)
      axios.post("/clickclick", {
        node: value.currentNode
      }).then(function (response) {
        //console.log("response received from backend: " + JSON.stringify(response, null, 4))
        console.log("values: (" + response.data + ")")
        var data = response.data
        var incdec = []
        var prev = 0;
        data.forEach(function(element, index){
          if(element > data[index-1]){ 
            incdec[index-1] = "increase"
          } else { 
            incdec[index-1] = "decrease"
          }
          prev = element
        })
        var waterfallSpec = {
          "$schema": "https://vega.github.io/schema/vega-lite/v2.json",
          "description": "Waterfall chart of combined price index",
          "width": 400, "height": 250, "padding": 5,
          "data": {
            "values": [
              { "year": "2020M02", "start": data[0], "end": data[1], "cat": incdec[0] },
              { "year": "2020M03", "start": data[1], "end": data[2], "cat": incdec[1] },
              { "year": "2020M04", "start": data[2], "end": data[3], "cat": incdec[2] },
              { "year": "2020M05", "start": data[3], "end": data[4], "cat": incdec[3] },
              { "year": "2020M06", "start": data[4], "end": data[5], "cat": incdec[4] },
              { "year": "2020M07", "start": data[5], "end": data[6], "cat": incdec[5] },
              { "year": "2020M08", "start": data[6], "end": data[7], "cat": incdec[6] },
              { "year": "2020M09", "start": data[7], "end": data[8], "cat": incdec[7] },
              { "year": "2020M10", "start": data[8], "end": data[9], "cat": incdec[8] },
              { "year": "2020M11", "start": data[9], "end": data[10], "cat": incdec[9] },
              { "year": "2020M12", "start": data[10], "end": data[11], "cat": incdec[10] },
              { "year": "2021M01", "start": data[11], "end": data[12], "cat": incdec[11] },
              { "year": "2021M02", "start": data[12], "end": data[13], "cat": incdec[12] },
              { "year": "2021M03", "start": data[13], "end": data[14], "cat": incdec[13] }
              //,{ "year": "2022M03", "start": data[14], "end": data[14], "cat": "total"}
            ]
          },
          "encoding": {
            "x": {
              "field": "year",
              "type": "nominal"
            },
            "y": {
              "field": "start",
              "type": "quantitative",
              "axis": { "title": "Total Consumer Price Index" },
              "scale": { "domain": [103, 105] }
            },
            "y2": {
              "field": "end",
              "type": "quantitative"
            }
          },
          "layer": [
            {
              "mark": "bar",
              "encoding": {
                "color": {
                  "field": "cat",
                  "type": "ordinal",
                  "legend": { "title": "" },
                  "scale": {
                    // "total is removed. Used to be: (total,#481f70ff) "
                    "domain": ["increase", "decrease"],
                    "range": ["#018571", "#bf812d"]
                  }
                }
              }
            },
            {
              "mark": "text",
              "encoding": {
                "y": {
                  "field": "end", "type": "quantitative"
                },
                "text": {
                  "condition": { "test": "datum['cat'] == 'total'", "field": "start" },
                  "field": "end", "type": "nominal"
                },
                "color": {
                  "condition": { "test": "datum['cat'] != 'increase'", "value": "#000" },
                  "value": "#000"
                }
              }
            }
          ],
          "config": {
            "text": {
              "baseline": "bottom",
              "align": "center",
              "fontWeight": "bold"
            }
          }
        }
        vegaEmbed('#waterfall', waterfallSpec)
      })
    })
  }).catch(console.warn);
</script>